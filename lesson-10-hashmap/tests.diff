diff ../lesson-09-struct/solved/tests/test_withdraw.py unsolved/tests/test_withdraw.py
10,11c10,15
< def test_open_loan_exists(minter):
<     assert hasattr(minter, "open_loan")
---
> def test_open_loans_exists(minter):
>     assert hasattr(minter, "open_loans")
> 
> 
> def test_repay_exists(minter):
>     assert hasattr(minter, "repay")
20c24,26
<     assert round(minter.repay_amount() / 10**18, 10) == round(expected_price, 10)
---
>     assert round(minter.repay_amount(accounts[0]) / 10**18, 10) == round(
>         expected_price, 10
>     )
29,30c35,36
<     # Check Liquidation Price
<     assert round(minter.open_loan()[0] / 10**18, 5) == round(
---
>     # Test Liquidation Price
>     assert round(minter.open_loans(accounts[0])[0] / 10**18, 5) == round(
34,35c40,65
<     # Check Deposit Amount
<     assert minter.open_loan()[1] == quantity
---
>     # Test Deposit Amount
>     assert minter.open_loans(accounts[0])[1] == quantity
> 
> 
> def test_repay_works(minter, accounts, is_forked, token, crv):
>     if not is_forked:
>         pytest.skip()
>     quantity = 10**18
> 
>     user = accounts[1]
>     crv._mint_for_testing(user, quantity)
> 
>     init_crv = crv.balanceOf(user)
>     init_token = token.balanceOf(user)
>     expected = minter.get_dy(quantity)
> 
>     crv.approve(minter, quantity, {"from": user})
>     minter.mint(quantity, {"from": user})
> 
>     assert token.balanceOf(user) == init_token + expected
>     assert crv.balanceOf(user) == init_crv - quantity
>     token.approve(minter, token.balanceOf(user), {"from": user})
>     minter.repay({"from": user})
> 
>     assert token.balanceOf(user) == init_token
>     assert crv.balanceOf(user) == init_crv
